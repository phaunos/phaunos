import os


SECRET_KEY = os.environ.get('SECRET_KEY', default=None)
if not SECRET_KEY:
    raise ValueError('No secret key set for Flask application')

POSTGRES_USER = os.environ['POSTGRES_USER']
POSTGRES_PASSWORD = os.environ['POSTGRES_PASSWORD']
POSTGRES_DB = os.environ['POSTGRES_DB']
POSTGRES_SERVER = os.environ['POSTGRES_SERVER']

SQLALCHEMY_DATABASE_URI = f'postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_SERVER}/{POSTGRES_DB}'
SQLALCHEMY_TRACK_MODIFICATIONS = False

FILE_FOLDER = '/app/files'
UPLOAD_FOLDER = 'uploads'
DUMMY_DATA_FOLDER = 'dummy_data'

CONFIRMATION_TOKEN_EXPIRATION = int(os.environ['CONFIRMATION_TOKEN_EXPIRATION'])


MAIL_SERVER = os.environ['MAIL_SERVER']
MAIL_PORT = int(os.environ['MAIL_PORT'])
MAIL_USE_TLS = int(os.environ['MAIL_USE_TLS']) == 1
MAIL_USE_SSL = int(os.environ['MAIL_USE_SSL']) == 1
MAIL_DEFAULT_SENDER = os.environ['MAIL_DEFAULT_SENDER']
MAIL_USERNAME = os.environ['MAIL_USERNAME']
MAIL_PASSWORD = os.environ['MAIL_PASSWORD']

SECURITY_PASSWORD_SALT = os.environ['SECURITY_PASSWORD_SALT']

JWT_TOKEN_LOCATION = ('headers', 'cookies')
JWT_SECRET_KEY = os.environ['JWT_SECRET_KEY']
JWT_ACCESS_TOKEN_EXPIRES = int(os.environ['JWT_ACCESS_TOKEN_EXPIRES'])
JWT_REFRESH_TOKEN_EXPIRES = int(os.environ['JWT_REFRESH_TOKEN_EXPIRES'])
JWT_COOKIE_CSRF_PROTECT = int(os.environ['JWT_COOKIE_CSRF_PROTECT']) == 1
JWT_COOKIE_SECURE = int(os.environ['JWT_COOKIE_SECURE']) == 1
